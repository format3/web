#!/usr/bin/env node

/**
 * Ports
 * @type {number}
 */
var portHttp = 8080;
var portHttps = 8443;

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('format:server');
var fs = require('fs');
var http = require('http');
var https = require('https');

/**
 * SSL
 */
var privateKey  = fs.readFileSync('../keys/client-key.pem', 'utf8');
var certificate = fs.readFileSync('../keys/client-cert.pem', 'utf8');
var credentials = {key: privateKey, cert: certificate};

/**
 * Servers
 */
var httpServer = http.createServer(app);
var httpsServer = https.createServer(credentials, app);

/**
 * Listeners
 */
httpServer.listen(portHttp);
httpsServer.listen(portHttps);

/**
 * Events
 */
httpServer.on('error', function(err) {
    onError(err, portHttp);
});
httpServer.on('listening', function(err) {
    onListening(httpServer);
});

httpsServer.on('error', function(err) {
    onError(err, portHttps);
});
httpsServer.on('listening', function(err) {
    onListening(httpsServer);
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error, port) {
    app.set('port', port);

    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening(server) {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
